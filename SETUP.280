	title	'CPU280 System Configuration Setup'
	.xlist
	maclib	CPU280
	maclib	LOADER
	maclib	LDRIO
	.list
	.z280

; 950131 Tilmann Reh

; 10-July-2017 Tony Nicholson
; Comments translated from German to English (using Google
; Translate with some appropriate language adjustments resulting
; from an examination of the instruction sequences).  Also
; corrected the syntax to be compatible with Hector Peraza's
; ZSM4 Z80/Z180/Z280 assembler 

; General input of parameters within a range.
; Range start in D, Range length in E. Entered
; characters are converted to uppercase.
; Output with entered value in A (normalised, from 0)

Input:	call	ConIn		; Get input
	cp	'a'
	jr	c,Input1	; less than 'a': use directy
	cp	'z'+1
	jr	nc,Input1	; greater than 'z': likewise
	and	5Fh		; otherwise to UPPERCASE
Input1:	sub	d
	jr	c,Input		; Value too small: keep waiting
	cp	e
	jr	nc,Input	; Value too high: continue waiting
	push	af
	add	a,d		; Back to input value
	call	COA		; Echo to console
	pop	af
	ret			; Return with character in A

; General input of numeric values:
; First invalid value in E, Output with value in A (from 0).

select:	call	conin
	ld	c,a
	sub	'0'
	jr	c,select
	cp	e
	jr	nc,select	; Permitted entries 0 .. (e-1)
	push	af
	call	co		; Echo
	pop	af
	ret			; Return with normalised value in A

; General Table Distributor for Menus:

menu:	call	select		; Enter 0 .. (e-1)
	add	a,a
	add	hl,a
	ldw	hl,(hl)		; Index into Table
	jp	(hl)

;***********************************************************************
;**       Main menu: Select Drives/ Interfaces/ Other                 **
;***********************************************************************

hmenu::	ld	hl,h_msg
	call	pmsg		; Selection Menu
	ld	hl,h_tbl
	ld	e,4
	jp	menu		; Evaluate input

h_tbl:	defw	exit,dmenu,smenu,xmenu

exit:	ret			; back to the Bootloader

;***********************************************************************
;**                  Menu for Floppy Disk Drives                      **
;***********************************************************************

dmenu:	ld	hl,def
	call	pmsg
	ld	hl,drive0
	ld	b,4
dm1:	call	ddisp
	inc	hl
	djnz	dm1		; Show current settings
	ld	hl,d_msg
	call	pmsg		; Output menu
	ld	hl,d_tbl
	ld	e,5
	jp	menu		; Evaluate input

d_tbl:	defw	hmenu,setdrv,setdrv,setdrv,setdrv

; Show current Drive types;

ddisp:	ld	c,tab
	call	co
	ld	a,'D'+1
	sub	b
	call	coa		; Drive letter
	ld	c,':'
	call	co
	ld	a,(hl)		; Flag
	push	hl
	and	7		; lower 3 bits : Typ
	add	a,a
	exts	a
	ldw	hl,(hl++t_tbl)
	jr	z,dd2		; no drive: only show Typ
	cp	2*4
	jr	z,dd1		; Typ 4: 8-inch drives no Track count!
	call	pmsg		; output Typ
	ldw	hl,(sp++0)
	bit	3,(hl)		; Track number bit
	ld	hl,trk0
	jr	z,dd1
	ld	hl,trk1
dd1:	call	pmsg		; Output track number
	ldw	hl,(sp++0)
	bit	4,(hl)		; Number of sides bit
	ld	hl,sid0
	jr	z,dd2
	ld	hl,sid1
dd2:	call	pmsg		; Output page number
	pop	hl
	ret

t_tbl:	defw	typ0,typ0,typ2,typ3,typ4,typ5,typ6,typ7

; Enter drive parameters:

setdrv:	rrca			; A = Input code (Drive)
	ld	hl,drive0-1	; (Input 1..4)
	add	hl,a
	push	hl		; Point to its Parameter
	ld	hl,t_msg1
	call	pmsg		; Drive types selection menu
	ld	e,7
	call	select		; Input
	cp	1
	ccf			; CY=1 from value 1
	adc	a,0		; --> Values 0,2..7
	ld	d,a		; Typ to D
	jr	z,setd3		; No drive: complete Null
	cp	4
	jr	z,setd1		; 8": Track density fixed	
	ld	hl,t_msg2
	call	pmsg		; Number of tracks selection menu
	ld	e,2
	call	select		; Input
	or	a
	jr	z,setd2		; 40 Tracks
setd1:	set	3,d		; 80 Tracks
setd2:	ld	hl,t_msg3
	call	pmsg		; Number of sides selection menu
	ld	e,2
	call	select		; Input
	or	a
	jr	z,setd3		; 1 Side
	set	4,d		; 2 Sides
setd3:	pop	hl
	ld	(hl),d		; Save drive identifier
	jp	dmenu		; Back to the Drive Menu

;***********************************************************************
;**                   Menu for Interfaces                             **
;***********************************************************************

smenu:	ld	hl,def
	call	pmsg
	ld	b,0
	call	sdisp1		; Show CRT1 settings
	ld	b,1
	call	sdisp1		; Show CRT2 settings
	call	sdisp2		; Show current Assignments

	ld	c,'0'
	ld	hl,CTbl		; Point to Number on 1st Interface
CDevLp:	push	bc
	call	ConOut		; Output Interface Number
	ld	c,'='
	call	ConOut		; '='
	ld	b,6		; Device Names are 6 characters
CDevL1:	ld	c,(hl)
	call	ConOut
	inc	hl
	djnz	CDevL1
	inc	hl
	inc	hl		; Ignore Device-Typ and Baudrate
	ld	a,(hl)
	or	a
	jr	z,SMenu1	; End of Device Table: continue with menu
	ld	c,' '
	call	ConOut
	call	ConOut		; Two Spaces as separators
	pop	bc
	inc	c		; next device number
	ld	a,c
	and	3		; Whole multiple of 4?
	jr	nz,CDevLp	; no: continue
	push	bc
	push	hl
	ld	hl,NewLin
	call	PMsg		; otherwise start a newline
	pop	hl
	pop	bc
	jr	CDevLp		; Continue until the end of the table

SMenu1:	pop	bc		; (Stack-correction)
	ld	hl,s_msg
	call	pmsg		; Output menu
	ld	hl,s_tbl
	ld	e,6
	jp	menu		; Evaluate input

s_tbl:	defw	hmenu,seth,seth,setb,setb,setdev

; Display CRT Parameters (Hardware-Settings and Baudrate):

sdisp1:	ld	hl,crt1m
	bit	0,b
	jr	z,sd1
	ld	hl,crt2m
sd1:	call	pmsg		; Output CRT1: or CRT2:
	ld	a,b
	add	a,a		; Device Number *2 in A (0..2)
	ld	hl,crt1h
	add	hl,a		; Point to Hardware-Flags
	ld	c,(hl)
	xor	a
	rl	c
	rra			; Bit 7 --> A7
	rl	c
	rla			; Bit 6 --> A0, A7 -> CY
	rla			; Bit 6 in A1, Bit 7 in A0
	add	a,'5'		; Number of bits in A (ASCII)
	call	coa		; Ouput
	ld	c,'+'
	call	co
	ld	c,'n'
	bit	0,(hl)		; Parity Enable ?
	jr	z,sd2
	ld	c,'o'
	bit	1,(hl)		; Parity Odd ?
	jr	z,sd2
	ld	c,'e'
sd2:	call	co		; Show parity
	ld	a,(hl)
	and	0Ch		; Number of Stopbits (shl 2)
	xor	04h		; --> 1.5 at the end (because of text length)
	ex	de,hl
	ld	hl,crtsm
	add	hl,a
	call	pmsg		; Output number of stopbits
	ld	a,(de)
	bit	5,a		; Auto Enables ?
	ld	hl,handm
	jr	nz,sd3
	ld	hl,nhandm
sd3:	call	pmsg		; Output Text
	ex	de,hl
	inc	hl		; Point to Baudrate
	ld	a,(hl)
	multu	a,6		; 6 characters per Baudrate
	lda	hl,(hl++baudt-6)
	call	pmsg		; Output numeric Baudrate
	ld	hl,baudm
	jp	pmsg		; Output 'Baud' and End

; Display Interface Assignments (Device Vectors):
; Only numbers from 0..9 are allowed!

sdisp2:	ld	b,5
	ld	ix,numtab
	ld	hl,defci	; Pointer to Device-Numbers
sd4:	ld	a,(hl)
	add	a,'0'		; --> ASCII
	ldw	de,(ix+0)
	ld	(de),a		; Insert characters in String
	inc	ix
	inc	ix
	inc	hl
	djnz	sd4		; all 5 logical Devices
	ld	hl,defmsg
	jp	pmsg		; Output Text

numtab:	defw	cinum,conum,ainum,aonum,lstnum

; Input of Hardware Parameters:

seth:	sub	2		; 2* Device 0..1 in A
	ld	hl,crt1h
	add	hl,a		; Pointer to Parameter byte
	push	hl		; save
	ld	hl,datbm
	call	pmsg		; Ask about Data bits
	ld	e,4
	call	select		; Input
	rrca
	rrca
	ld	d,a		; --> Bit 7,6 of D
	ld	hl,parbm
	call	pmsg		; Ask about Parity bits
	ld	e,4
	call	select		; Input
	or	d
	ld	d,a		; --> Bit 1,0 of D
	ld	hl,stopbm
	call	pmsg		; Ask about Stop bits
	ld	e,3
	call	select		; Input
	inc	a		; --> Value 1..3
	rlca
	rlca
	or	d
	ld	d,a		; --> Bit 3,2 from D
	ld	hl,hndm
	call	pmsg		; Ask about flow control handshake
	ld	e,2
	call	select		; Input
	rrca
	rrca
	rrca
	or	d		; --> Bit 5
	pop	hl		; Pointer to Parameter byte
	ld	(hl),a		; save new value
	jp	smenu		; back to the menu

; Input the Baudrate:

setb:	sub	6		; 2* Device 0..1 in A
	ld	hl,crt1bd
	add	hl,a		; Point to Parameter byte
	push	hl		; save
	ld	hl,sbaudm
	call	pmsg		; Ask for Baudrate
	ld	d,'A'
	ld	e,15
	call	Input		; Input
	inc	a		; is counted from 1!
	pop	hl		; Poiner to Parameter byte
	ld	(hl),a		; Save new value
	jp	smenu

; Input of the Interface assignments:

setdev:	ld	b,5
	ld	ix,settab
	ld	iy,defci
sm1:	ldw	hl,(ix+0)
	call	pmsg		; Issue question
	ld	e,16		; Entries 0..15 allowed (officially 0..9)
	call	select		; Input value
	ld	(iy+0),a	; and save
	inc	ix
	inc	ix
	inc	iy
	djnz	sm1		; query all 5 values
	jp	smenu		; back to the Menu

settab:	defw	setci,setco,setai,setao,setlst

;***********************************************************************
;**                     Menu for Other Settings                       **
;***********************************************************************

xmenu:	ld	hl,def
	call	pmsg
	ld	hl,sizmsg
	call	pmsg		; Output Text Beginning
	ld	hl,(memsiz-1)
	ld	l,0
	add	hl,hl		; Memory size KB in HL (Blocks * 512)
	call	pdec		; Show
	ld	hl,szm
	ld	a,(sommer)
	or	a
	jr	nz,xm1		; Summertime: output szm
	ld	hl,nzm
xm1:	call	pmsg		; Time Specification
	ld	a,(botdrv)
	add	a,'A'
	ld	(drvm),a	; Boot Drive letter
	ld	b,4
	ld	de,chain
	ld	hl,chnm		; Pointer to source and destination
xm2:	ld	a,(de)
	ld	c,'*'
	or	a
	jr	z,xm3		; Value 0 : Default Drive
	inc	a
	jr	z,xm5		; Value FF : End of Chain
	add	a,'A'-2
	ld	c,a		; all others (1..16) : Drive (A..P)
xm3:	ld	(hl),c		; Insert characters
	inc	hl
	inc	de
	djnz	xm2		; Specify all four drives
xm4:	ld	hl,zeitm
	call	pmsg		; Output Text with Bootdrive and Chain
	ld	hl,x_msg
	call	pmsg		; Output menu
	ld	hl,x_tbl
	ld	e,5
	jp	menu		; Evaluate input

xm5:	ld	(hl),' '
	inc	hl
	djnz	xm5		; Fill remaining area with SPC
	jr	xm4

x_tbl:	defw	hmenu,setsiz,setsz,setbot,setchn

; Set Memory Size

setsiz:	ld	hl,ssizm
	call	pmsg		; Issue question
	ld	e,4
	call	select		; Input 0..3
	ld	hl,siztab
	add	hl,a		; Pointer to 512k-Block number
	ld	a,(hl)
	ld	(memsiz),a	; Save value
	jp	xmenu

siztab:	defb	1,2,4,8

; Summer time

setsz:	ld	hl,sszm
	call	pmsg		; Issue question
	ld	e,2
	call	select		; Inpute 0..1
	ld	(sommer),a	; Save
	jp	xmenu

; Boot Drive

setbot:	ld	hl,sbootm
	call	pmsg		; Issue question
	ld	d,'A'
	ld	e,17
	call	Input		; Input A..P (Q=EPROM)
	ld	(botdrv),a	; Save
	jp	xmenu

; Drive Search Chain

setchn:	ld	hl,schnm
	call	pmsg		; Issue Question
	ld	b,4
	ld	hl,chain
sc1:	call	conin		; Get the sign
	ld	c,a
	ld	(hl),0
	cp	'*'
	jr	z,sc2		; Default-Drive: Code 0
	dec	(hl)
	and	05Fh		; CAPS
	cp	'X'
	jr	z,sc3		; End: Code FF
	cp	'A'
	jr	c,sc1		; Character smaller than 'A' : invalid
	cp	'P'+1
	jr	nc,sc1		; greater than 'P': also invalid
	sub	'A'-1		; --> Codes 1..16
	ld	(hl),a
sc2:	call	co		; Echo entered character
	inc	hl		; next position
	djnz	sc1		; maximum of four digits
	jp	xmenu

sc3:	ld	a,b
	cp	4
	jr	z,sc1		; in the first place (B=4) end inadmissible!
sc31:	ld	(hl),-1
	inc	hl
	djnz	sc31		; Fill remaining places with -1
	jp	xmenu

;***********************************************************************
;**                          Menu Texts                               **
;***********************************************************************


	if deutsch

h_msg:	defm	cr,lf,lf,'1. Diskettenlaufwerke'
	defm	cr,lf,'2. Schnittstellen'
	defm	cr,lf,'3. Sonstiges'
	defm	cr,lf,'0. Ende (Reboot)'
	defz	cr,lf,'--> '

d_msg:	defm	cr,lf,tab,'1. Laufwerk A:'
	defm	cr,lf,tab,'2. Laufwerk B:'
	defm	cr,lf,tab,'3. Laufwerk C:'
	defm	cr,lf,tab,'4. Laufwerk D:'
	defm	cr,lf,tab,'0. zur}ck'
	defz	cr,lf,tab,'--> '

s_msg:	defm	')',cr,lf
	defm	cr,lf,tab,'1. Hardware-Parameter CRT1'
	defm	cr,lf,tab,'2. Hardware-Parameter CRT2'
	defm	cr,lf,tab,'3. Baudrate CRT1'
	defm	cr,lf,tab,'4. Baudrate CRT2'
	defm	cr,lf,tab,'5. Zuordnungen nach Reset'
	defm	cr,lf,tab,'0. zur}ck'
	defz	cr,lf,tab,'--> '

x_msg:	defm	cr,lf,tab,'1. Speichergr|~e'
	defm	cr,lf,tab,'2. Sommerzeit'
	defm	cr,lf,tab,'3. Bootlaufwerk'
	defm	cr,lf,tab,'4. Drive Search Chain'
	defm	cr,lf,tab,'0. zur}ck'
	defz	cr,lf,tab,'--> '

def:	defz	cr,lf,lf,tab,'Aktuelle Einstellungen:',cr,lf

typ0:	defz	' ---',cr,lf
typ2:	defz	' 3.5" DD, '
typ3:	defz	' 3.5" HD, '
typ4:	defz	' 8", '
typ5:	defz	' 5.25" HD 360, '
typ6:	defz	' 5.25" DD, '
typ7:	defz	' 5.25" HD 300/360, '
trk0:	defz	'40 Spuren, '
trk1:	defz	'80 Spuren, '
sid0:	defz	'1 Seite',cr,lf
sid1:	defz	'2 Seiten',cr,lf
t_msg1:	defm	cr,lf,tab,tab,'0. Kein Laufwerk'
	defm	cr,lf,tab,tab,'1. 3.5" DD'
	defm	cr,lf,tab,tab,'2. 3.5" HD'
	defm	cr,lf,tab,tab,'3. 8"'
	defm	cr,lf,tab,tab,'4. 5.25" HD 360'
	defm	cr,lf,tab,tab,'5. 5.25" DD'
	defm	cr,lf,tab,tab,'6. 5.25" HD 300/360'
	defz	cr,lf,tab,tab,'--> '
t_msg2:	defm	cr,lf,tab,tab,'0. 40 Spuren'
	defm	cr,lf,tab,tab,'1. 80 Spuren'
	defz	cr,lf,tab,tab,'--> '
t_msg3:	defm	cr,lf,tab,tab,'0. 1 Seite'
	defm	cr,lf,tab,tab,'1. 2 Seiten'
	defz	cr,lf,tab,tab,'--> '

crt1m:	defz	tab,'CRT1: '
crt2m:	defz	tab,'CRT2: '
crtsm:	defz	'+1',0,0,'+?',0,0,'+2',0,0,'+1.5'
handm:	defz	', Handshake, '
nhandm:	defz	', kein Handshake, '
baudt:	defm	'38400',0,'75',0,0,0,0,'110',0,0,0,'134.5',0,'150',0,0,0
	defm	'300',0,0,0,'600',0,0,0,'1200',0,0,'1800',0,0,'2400',0,0
	defm	'3600',0,0,'4800',0,0,'7200',0,0,'9600',0,0,'19200',0
baudm:	defz	' Baud',cr,lf
defmsg:	defm	tab,'CONIN: '
cinum:	defm	'0, CONOUT: '
conum:	defm	'0, AUXIN: '
ainum:	defm	'0, AUXOUT: '
aonum:	defm	'0, LSTOUT: '
lstnum:	defm	'0',cr,lf
	defz	tab,'('
NewLin:	defz	CR,LF,TAB,' '
setci:	defz	cr,lf,tab,tab,'CONIN:  --> '
setco:	defz	cr,lf,tab,tab,'CONOUT: --> '
setai:	defz	cr,lf,tab,tab,'AUXIN:  --> '
setao:	defz	cr,lf,tab,tab,'AUXOUT: --> '
setlst:	defz	cr,lf,tab,tab,'LSTOUT: --> '
datbm:	defz	cr,lf,tab,tab,'Datenbits:  0=5, 2=6, 1=7, 3=8 --> '
parbm:	defz	cr,lf,tab,tab,'Parity: 0=keine, 1=odd, 3=even --> '
stopbm:	defz	cr,lf,tab,tab,'Stopbits:      0=1, 1=1.5, 2=2 --> '
hndm:	defz	cr,lf,tab,tab,'Handshake:        0=nein, 1=ja --> '
sbaudm:	defm	cr,lf,tab,tab,'Baudraten:'
	defm	cr,lf,tab,tab,'B  75   E 150   H 1200   K 3600   N  9600'
	defm	cr,lf,tab,tab,'C 110   F 300   I 1800   L 4800   O 19200'
	defm	cr,lf,tab,tab,'D 134   G 600   J 2400   M 7200   A 38400'
	defz	cr,lf,tab,tab,'--> '

sizmsg:	defz	tab,'Speicher '
szm:	defz	'k, Sommer'
nzm:	defz	'k, Normal'
zeitm:	defm	'zeit, Boot '
drvm:	defm	'A:, Chain '
chnm:	defz	'    ',cr,lf
ssizm:	defz	cr,lf,tab,tab,'Speicher: 0=512k, 1=1M, 2=2M, 3=4M --> '
sszm:	defz	cr,lf,tab,tab,'Sommerzeit: 0=Nein, 1=Ja --> '
sbootm:	defz	cr,lf,tab,tab,'Bootlaufwerk: A..P (Q=EPROM) --> '
schnm:	defm	cr,lf,tab,tab,'Search Chain: A..P=Drives, *=Default, x=Ende'
	defz	cr,lf,tab,tab,'max. 4 Zeichen eingeben --> '

	endif

	if english

h_msg:	defm	cr,lf,lf,'1. Disk Drives'
	defm	cr,lf,'2. Interfaces'
	defm	cr,lf,'3. Other'
	defm	cr,lf,'0. Exit (Reboot)'
	defz	cr,lf,'--> '

d_msg:	defm	cr,lf,tab,'1. Drive A:'
	defm	cr,lf,tab,'2. Drive B:'
	defm	cr,lf,tab,'3. Drive C:'
	defm	cr,lf,tab,'4. Drive D:'
	defm	cr,lf,tab,'0. back'
	defz	cr,lf,tab,'--> '

s_msg:	defm	')',cr,lf
	defm	cr,lf,tab,'1. Hardware Parameters CRT1'
	defm	cr,lf,tab,'2. Hardware Parameters CRT2'
	defm	cr,lf,tab,'3. Baud Rate CRT1'
	defm	cr,lf,tab,'4. Baud Rate CRT2'
	defm	cr,lf,tab,'5. Declarations after Reset'
	defm	cr,lf,tab,'0. back'
	defz	cr,lf,tab,'--> '

x_msg:	defm	cr,lf,tab,'1. Memory Size'
	defm	cr,lf,tab,'2. Daylight Saving'
	defm	cr,lf,tab,'3. Boot Drive'
	defm	cr,lf,tab,'4. Drive Search Chain'
	defm	cr,lf,tab,'0. back'
	defz	cr,lf,tab,'--> '

def:	defz	cr,lf,lf,tab,'actual values:',cr,lf

typ0:	defz	' ---',cr,lf
typ2:	defz	' 3.5" DD, '
typ3:	defz	' 3.5" HD, '
typ4:	defz	' 8", '
typ5:	defz	' 5.25" HD 360, '
typ6:	defz	' 5.25" DD, '
typ7:	defz	' 5.25" HD 300/360, '
trk0:	defz	'40 tracks, '
trk1:	defz	'80 tracks, '
sid0:	defz	'single-sided',cr,lf
sid1:	defz	'double-sided',cr,lf
t_msg1:	defm	cr,lf,tab,tab,'0. no drive'
	defm	cr,lf,tab,tab,'1. 3.5" DD'
	defm	cr,lf,tab,tab,'2. 3.5" HD'
	defm	cr,lf,tab,tab,'3. 8"'
	defm	cr,lf,tab,tab,'4. 5.25" HD 360'
	defm	cr,lf,tab,tab,'5. 5.25" DD'
	defm	cr,lf,tab,tab,'6. 5.25" HD 300/360'
	defz	cr,lf,tab,tab,'--> '
t_msg2:	defm	cr,lf,tab,tab,'0. 40 tracks'
	defm	cr,lf,tab,tab,'1. 80 tracks'
	defz	cr,lf,tab,tab,'--> '
t_msg3:	defm	cr,lf,tab,tab,'0. single sided'
	defm	cr,lf,tab,tab,'1. double sided'
	defz	cr,lf,tab,tab,'--> '

crt1m:	defz	tab,'CRT1: '
crt2m:	defz	tab,'CRT2: '
crtsm:	defz	'+1',0,0,'+?',0,0,'+2',0,0,'+1.5'
handm:	defz	', Handshake, '
nhandm:	defz	', no Handshake, '
baudt:	defm	'38400',0,'75',0,0,0,0,'110',0,0,0,'134.5',0,'150',0,0,0
	defm	'300',0,0,0,'600',0,0,0,'1200',0,0,'1800',0,0,'2400',0,0
	defm	'3600',0,0,'4800',0,0,'7200',0,0,'9600',0,0,'19200',0
baudm:	defz	' Baud',cr,lf
defmsg:	defm	tab,'CONIN: '
cinum:	defm	'0, CONOUT: '
conum:	defm	'0, AUXIN: '
ainum:	defm	'0, AUXOUT: '
aonum:	defm	'0, LSTOUT: '
lstnum:	defm	'0',cr,lf
	defz	tab,'('
NewLin:	defz	CR,LF,TAB,' '
setci:	defz	cr,lf,tab,tab,'CONIN:  --> '
setco:	defz	cr,lf,tab,tab,'CONOUT: --> '
setai:	defz	cr,lf,tab,tab,'AUXIN:  --> '
setao:	defz	cr,lf,tab,tab,'AUXOUT: --> '
setlst:	defz	cr,lf,tab,tab,'LSTOUT: --> '
datbm:	defz	cr,lf,tab,tab,'Data Bits:  0=5, 2=6, 1=7, 3=8 --> '
parbm:	defz	cr,lf,tab,tab,'Parity:  0=none, 1=odd, 3=even --> '
stopbm:	defz	cr,lf,tab,tab,'Stopbits:      0=1, 1=1.5, 2=2 --> '
hndm:	defz	cr,lf,tab,tab,'Handshake:         0=no, 1=yes --> '
sbaudm:	defm	cr,lf,tab,tab,'Baudrates:'
	defm	cr,lf,tab,tab,'B  75   E 150   H 1200   K 3600   N  9600'
	defm	cr,lf,tab,tab,'C 110   F 300   I 1800   L 4800   O 19200'
	defm	cr,lf,tab,tab,'D 134   G 600   J 2400   M 7200   A 38400'
	defz	cr,lf,tab,tab,'--> '

sizmsg:	defz	tab,'Memory '
szm:	defz	'k, Daylight Saving enabled'
nzm:	defz	'k, Daylight Saving disabled'
zeitm:	defm	', Boot '
drvm:	defm	'A:, Chain '
chnm:	defz	'    ',cr,lf
ssizm:	defz	cr,lf,tab,tab,'Memory: 0=512k, 1=1M, 2=2M, 3=4M --> '
sszm:	defz	cr,lf,tab,tab,'DSE: 0=no, 1=yes --> '
sbootm:	defz	cr,lf,tab,tab,'Boot Drive: A..P (Q=EPROM) --> '
schnm:	defm	cr,lf,tab,tab,'Search Chain: A..P=Drives, *=Default, x=Exit'
	defz	cr,lf,tab,tab,'input max. 4 characters --> '

	endif

;***********************************************************************
;**                         Data Ranges                               **
;***********************************************************************

; Default Setting at Startup:

drive0::defb	00011110b	; 5.25" 80 Track 2 Sides
drive1:	defb	00011110b	; "
drive2:	defb	0		; unavailable
drive3:	defb	0		; "

crt1h:	defb	def1h		; Defaults according to LDRIO.LIB
crt1bd:	defb	def1bd
crt2h:	defb	def1h		; CRT2 like CRT1
crt2bd:	defb	def1bd
defci:	defb	0
defco:	defb	0		; CON on CRT1
defai:	defb	1
defao:	defb	1		; AUX on CRT2
deflst:	defb	1		; LST on CRT2

memsiz:	defb	0		; (will be set automatically)
sommer:	defb	0		; Standard Time
botdrv:	defb	0		; Boot from A:
chain:	defb	0,-1,-1,-1	; Chain only Default-Drive

valnum	equ	$-drive0
public	valnum

	end
