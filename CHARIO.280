	title	'CHARIO Subroutines of CP/M-3 BIOS'	
	.z280
	.xlist
	maclib	Z280EQU
	maclib	CPU280
	maclib	OPTIONS
	.list

; 950131 Tilmann Reh

; 10-July-2017 Tony Nicholson
; Comments translated from German to English (using Google
; Translate with some appropriate language adjustments resulting
; from an examination of the instruction sequences).  Also
; corrected the syntax to be compatible with Hector Peraza's
; ZSM4 Z80/Z180/Z280 assembler 

	if not loader	; This code is for the System BIOS
			; (only DevTbl for loader)

CtlC	equ	'C'-40h		; ^C: Break-Character
ctlq	equ	'Q'-40h		; ^Q: XON
ctls	equ	'S'-40h		; ^S: XOFF

;***********************************************************************
;**           Port-Definitions for Different Options                  **
;***********************************************************************

; Since the actual driver is table driven there are no special
; routines for each device.  The adaption for different I/O devices
; is to define the various port addresses in the table (at the end
; of this module).

; The XON/XOFF protocolhas not yet been revised (better not use)...

; Speed entries for 50 baud are actually mapped to 38400 baud

;***********************************************************************
;**      On-Board I/O Devices: CPU-UART (CRT1) and TPUART (CRT2)      **
;***********************************************************************

; The CPU internal UART (Device 0, CRT1) can use baud rates over 9600 Baud
; only if the clock frequency is a multiple of 1.2288 MHz (19200) or
; 2.4576 MHz (38400). The baud rates 1800, 3600 and 7200 can be faulty
; Only 7 or 8 data bits and 1 or 2 stop bits are supported.

; The TPUART (Device 1, CRT2) generates 50 baud instead of 75 baud.
; Again  , only 7 or 8 data bits and 1 or 2 stop bits.

NumDev	aset	2		; On-Board 2 interfaces (CPU/TPUART)

;***********************************************************************
;**           Option: REH ECB-I/O/CLK (V24AR,V24AT,V24B)              **
;***********************************************************************

; For serial interfaces on the ECB-I/O/CLK (V24A und V24B) option board
; the baud rates 1800, 3600 and 7200 are only approximate (error rate of
; 3%). V24AR and V24AT will only have the specified baud rates if BOTH
; rates are in 75..150 baud or BOTH in the 300..38400 range. Parity and
; Stopbits are common to V24AR and V24AT and are taken from V24AT.

	if	ioclk
IOCBase	equ	20h		;Base address
IOCBdAR	equ	IOCBase+8	; CTC channel Baudrate V24A-Receiver
IOCBdAT	equ	IOCBase+9	; CTC channel Baudrate V24A-Transmitter
IOCBdB	equ	IOCBase+10	; CTC channel Baudrate V24B
;SysCTC	equ	IOCBase+11	; CTC channel for 'System Use'
V24AD	equ	IOCBase+12	; Data port SIO V24A
V24BD	equ	IOCBase+13	; Data port SIO V24B
V24AC	equ	IOCBase+14	; Control port SIO V24A
V24BC	equ	IOCBase+15	; Control port SIO V24B
NumDev	aset	NumDev+3	; Three additional interfaces (V24AR/T,V24B)
	endif

;***********************************************************************
;**           Option: Centronics Printer Spooler (SPOOL)              **
;***********************************************************************

	if	spool
SplBase	equ	50h
SplSta	equ	SplBase		; Spooler status port (BUSY-Bit)
SplDat	equ	SplBase+1	; Spooler data port
NumDev	aset	NumDev+1	; Another interface (SPOOL)
	endif

;***********************************************************************
;**         Option: REHdesign HGT, Text/Graphics-Terminal (HGT)       **
;***********************************************************************

	if	hgt
HgtBase	equ	60h		;Base address
HgtDat	equ	HgtBase		; Data port HGT
HgtSta	equ	HgtBase+1	; Status port HGT
NumDev	aset	NumDev+1	; Another interface (HGT)
	endif

;***********************************************************************
;**        Option: REHdesign IDE-Interface, Centronics (CENTR)        **
;***********************************************************************

	if	ide
Centr	equ	85h		; Port adresse IDE-Centronics (R/W)
NumDev	aset	NumDev+1	; Another interface (CENTR)
	endif

;***********************************************************************
;**        Initialisation of Character I/O Interfaces                 **
;***********************************************************************

	dseg			; system bank (called via SC)

; Common routine - also table driven initialisation...

DevIni::ld	a,c		; Device Code
	cp	NumDev		; valid?
	ret	nc		; Code too high : RETURN without action
	add	a,a
	exts	a		; doubled to HL
	ldw	hl,(hl++DviTbl)	; Address of Initialisation routine
	push	hl		; ...on Stack
	multu	a,4		; 8x dev in HL (H=0)
	ld	b,h		; Device in BC
	ld	a,(hl++CTbl+7)
	ld	e,a		; Baud rate code in E
	ld	hl,CTbl-1
	subw	hl,bc		; Point to phys. communications parameters
	ld	a,(hl)		; Parameter in A
DviRet:	ret			; --> Init (Parm in A, Dev in BC, Baud in E)

DviTbl:	defw	CPUIni,TPUIni	; Basic devices CPU/TPUART
    if ioclk
	defw	IOCIni,IOCIni,IOCIni ; ECB-I/O/CLK: three SIO interfaces
    endif
    if spool
	defw	DviRet		; Spooler Centronics no initialisation
    endif
    if hgt
	defw	DviRet		; HGT interface no initialisation
    endif
    if ide
	defw	DviRet		; IDE-Centronics no initialisation
    endif

; Initialisation of CPU internal UART (Device 0):

CPUIni:	ld	b,a		; Hardware Parameter to B
	iopage	BoardP
	out	(RTS1_En),a	; RTS1 := active
	in	a,(CPUFreq)
	ld	d,a		; CPU-Frequeny (x 614400 Hz) to D
	iopage	UartP
	ld	l,e
	ld	h,0		; Baud to HL
	ld	e,h		; CPU-Frequeny *256 to DE
	add	hl,hl
	ldw	hl,(hl++CT1Tab-2) ; normalize divide factor (*256) in HL
	multuw	hl,de		; Result (/65536) in DE
	ex	de,hl		; --> HL
	dec	hl		; -1 for Time Constant Register
	ld	c,TC1
	outw	(c),hl		; new 'Time Constant' for CT1
	ld	a,10001000b
	out	(CR1),a		; CT1: Cont. Timer, Output
	ld	a,11100000b
	out	(CS1),a		; CT1 Enable
	ld	a,b
	and	00001000b	; Isolate Parameter bit 3
	rlca			; --> Bit 4
	or	10000001b
	out	(TCS),a		; Transmitter Control
	ld	a,10000000b
	out	(RCS),a		; Receiver Control
	bit	5,b		; Auto Enables (CTS) ?
	ld	a,0C9h		; RET Opcode
	jr	z,Dvi0_1	; no Auto-Enables: do not try CTS
	xor	a		; otherwise NOP Opcode
Dvi0_1:	ld	(OSt0),a	; patch for command byte in OST0
	ld	a,b		; Parameter
	rrca			; 07654321 cy=0
	rrca			; 10765432 cy=1
	rla			; 0765432x cy=1
	rr	b
	rla			; 765432xx cy=0
	rr	b
	rla			; 65432xxx cy=7
	rr	b
	rla			; 5432xxxx cy=6
	ld	a,b
	rra			; A7..4 contains bits 6701
	and	0F0h
	or	00001010b	; constant bits
	out	(UCR),a		; UART Control Register
	ret

CT1Tab:	defw	64,32768,22342,18273,16384,8192,4096	; 38400; 75..600 Bd
	defw	2048,1366,1024,683,512,342,256,128	; 1200..19200 Bd

; Initialisation of the Onboard TPUART (Device 1):

TPUIni:	ld	b,a		; Parameter to B
	iopage	BoardP
	ld	a,11011010b	; TPUART Reset, RX/TX Disable, CP2 active
	out	(UartCtl),a
	res	7,a
	out	(UartCtl),a	; TPUART Reset
	ld	a,b
	and	00101011b	; Bits 0,1,3,5
	xor	00100010b	; Invert Bits 1 and 5, CY=0
	rla
	rla
	rla
	rla			; push Bits to 4,5,7,0
	ld	c,a		; save to C
	ld	a,b
	and	10000000b	; isolate Bit 7
	rrca			; --> Bit 6
	or	c		; combine all bits
	or	00000100b	; Bits 1,2,3 = 010
	out	(UartDat),a	; TPUART MODE CONTROL
	xor	a
	out	(UartDat),a	; TPUART INTERRUPT MASK
	ld	a,e
	dec	a		; Baudrate 0..14
	cp	9
	sbc	a,0		; --> -1..7, 9..14
	and	0Fh		; only lower 4 bits
	out	(UartDat),a	; TPUART BAUD RATE SELECT REGISTER
	ld	a,01100110b
	out	(UartCtl),a	; RX/TX Enable, CP2 aktiv
	ret

; Initialisation of the SIO to ECB-I/O/CLK (Devices 2,3,4) :
; Goes in this form only with these device numbers!

	if	ioclk

IOCIni:	and	0E0h		; Only bit width/ Auto Enables
	or	1		; RX Enable
	ld	(Sio3),a	; in SIO-Register 3
	ld	a,(hl)
	and	0C0h		; Only bit width
	rrca			; position correctly
	or	8Ah		; DTR, RTS, TX Enable
	ld	(Sio5),a	; in SIO-Register 5
	ld	a,(hl)
	and	0Fh		; mask lower 4 bits for SIO-Reg4, in A
	ld	l,e
	ld	h,0		; Baud to HL
	or	a,(hl++SioDiv-1) ; SIO mask
	ld	(Sio4),a	; SIO-Register 4 complete
	ld	a,(hl++CtcTab-1) ; Time constant for CTC 1..256 (0=256)
	ld	(Speed),a	; insert into Init Table
	ld	hl,SioCtc-4
	add	hl,bc		; (BC still Device 2..4)
	add	hl,bc		; Point to SIO/CTC port Table
	ld	a,(hl)
	ld	(SioRx),a	; Set SIO Control port
	ld	(SioTx),a	; for RX and TX Initialisation
	inc	hl
	ld	a,(hl)
	ld	(CtcPrt),a	; set CTC Port
	ld	a,c		;!!! Device Code to A
	iopage	BusP		; I/O/CLK is on the ECB Bus
	ld	hl,RxTab	; Table for RX Initialisation
	cp	3		;!!!
	call	nz,StrIni	; Receiver of SIO init. (except V24AT)
	ld	hl,TxTab	; Table for TX-Initialisation
	cp	2		;!!!
	call	nz,StrIni	; SIO-Transmitter init. (except V24AR)
	ld	hl,CtiTab	; Point to CTC Init Table

StrIni:	ld	b,(hl)		; Number of bytes from Init Table
	inc	hl
	ld	c,(hl)		; Port address for OTIR
	inc	hl
	otir			; Output bytes
	ret

CtcTab:	defb	2,0,175,143,128,0,128		; CTC values 50..600 Bd
	defb	64,43,32,21,16,11,8,4		; CTC values 1200..19200 Bd
SioDiv:	defb	40h,0C0h,0C0h,0C0h,0C0h,40h,40h ; SIO prescaler 50..600 Bd
	defb	40h,40h,40h,40h,40h,40h,40h,40h	; SIO prescaler 1200..19200 Bd

SioCtc:	defb	V24AC,IOCBdAR	; Addresses V24AR
	defb	V24AC,IOCBdAT	; Addresses V24AT
	defb	V24BC,IOCBdB	; Addresses V24B

RxTab:	defb	3		; 3 Bytes an SIO
SioRx:	defs	1		; Port address SIO Control
	defb	0,3		; Security / Pointer
Sio3:	defs	1		; SIO-Register 3 : RX Char / Auto Enables

TxTab:	defb	5		; 5 Bytes an SIO
SioTx:	defs	1		; Port address SIO-Control
	defb	0,4		; Security / Pointer
Sio4:	defs	1		; SIO-Register 4 : Parity, Stopbits, Clocks
	defb	5		; Pointer
Sio5:	defs	1		; SIO-Register 5 : TX Char / DTR,RTS

CtiTab:	defb	3		; 3 Bytes an CTC
CtcPrt:	defs	1		; Port address des CTC
	defb	41h,47h		; Security / Mode Control
Speed:	defs	1		; CTC Time Constant

	endif

;***********************************************************************
;**   Output Routines for all logical character I/O Interfaces        **
;***********************************************************************

List::	ld	hl,(@LOVec)	; LISTER OUT
	jr 	OutScn

AuxOut::ld	hl,(@AOVec)	; AUXILIARY OUT
	jr	OutScn

ConOut::ld	hl,(@COVec)	; CONSOLE OUT

OutScn:	ld	b,0		; start with Device 0
	ld	e,c		; character to E
OutSc1:	add	hl,hl		; slide out the highest vector bit
	call	c,COut		; If it's active, output the characters
	inc	b		; next Device
	ld	a,h
	or	l
	jr	nz,OutSc1
	ret

COut:	call	CoStat		; Check output status
	jr	z,COut		; spin wait until ready
	ld	c,(ix+4)	; Fetch the port address
	out	(c),e		; output character
	ret

;***********************************************************************
;**    Output Status of all logical I/O Interfaces                    **
;***********************************************************************

ListSt::ld	hl,(@LOVec)	; LIST-OUT-STATUS
	jr	OStScn

AuxOSt::ld	hl,(@AOVec)	; AUX-OUT-STATUS
	jr	OStScn

ConOSt::ld	hl,(@COVec)	; CON-OUT-STATUS

OStScn:	ld	b,0		; start with Device 0
OStSc1:	or	0FFh		; Z=0
	add	hl,hl
	call	c,CoStat	; Device active, read status
	ret	z		; at least 1 Device busy --> RET with A=0
	inc	b		; Device + 1
	ld	a,h
	or	l		; more?
	jr	nz,OStSc1
	dec	a		; everybody ready
	ret			; RET with A=FF

; Actual status query including software handshake.
; Return with A=0, Z=1 if device not ready (otherwise A=FF, Z=0).
; Register BDEHL unchanged.

CoStat:	push	hl
	ld	a,8
	multu	a,b		; HL = 8* Device
	ld	a,(hl++CTbl+6)	; Mode Byte of the selected Device
	and	XonXoff		; XON/XOFF enable ?
	jr	z,CoSt0		; No, Status direct from the hardware
	ld	a,b
	ld	hl,XoffList
	add	hl,a		; Point to the XON Flag of the device
	call	CiSt		; any character there?
	ld	a,(hl)		; fetch previous flag
	call	nz,Cin		; fetch character to A
	cp	ctlq
	jr	nz,notq		; Is it ^Q (XON) ...
	ld	a,0FFh		; Yes, Flag : ready
notq:	cp	ctls
	jr	nz,nots		; Is it ^S (XOFF) ...
	xor	a		; Flag : not ready
nots:	ld	(hl),a		; Save flag or character received
	call	CoSt		; check Output-Status
	and	(hl)		; mask with XON/XOFF flag (=0 is NotReady)
	pop	hl
	ret	z		; RET with combined status (A=0, Z=1)
	or	0FFh		; A could otherwise hold a received character!
	ret

; Table driven hardware output driver for all character devices.
; Special handling for Hardware Handshake Device 0 (CPU-UART) via GPI.
; Device in B on entry. Register BDEHL unchanged.
; Then set IX=^PORTS, I/O Page according to the table.
; Return result: with READY A=FF / Z=0, with NOT READY A=0, Z=1.

CoSt:	push	hl
CoSt0:	ld	a,9
	multu	a,b		; HL = 9x Device
	call	z,OSt0		; Device 0: Hardware handshake
	lda	ix,(hl++Ports)	; Pointer to device port data
	iopage	(ix)		; Set I/O-Page
	pop	hl
	ld	c,(ix+1)	; Status port address
	in	a,(c)		; Read Status
	xor	(ix+2)		; Possibly invert bits
	and	(ix+3)		; Check TXE Mask
	ret	z		; A=00 : Not Ready
	or	0FFh		; A=FF : Ready
	ret

; CTS Handshake driver for Device 0 (CPU-UART). First command is through
; DEVINI patched to NOP or RET to turn handshake ON or OFF.

OSt0:	nop
	ld	a,l
	iopage	BoardP
	ld	l,a
	in	a,(gpi)
	bit	b$cts1,a
	ret	z		; CTS available, continue normally (TXE check)
	pop	hl		; (Return Address)
	pop	hl		; (HL)
	xor	a		; not ready: A=0, Z=1
	ret

;***********************************************************************
;**    Input Status of all logical character I/O Interaces            **
;***********************************************************************

AuxISt::ld	hl,(@AIVec)	; AUXILIARY-INPUT-STATUS
	jr	IStScn

ConSt::	ld	a,(BrkFlg)	; CONSOLE-INPUT-STATUS
	or	a		; Is there a ^C to send?
	ret	nz		; yes: report 'Device Ready'
	ld	hl,(@CIVec)	; otherwise get input vector

IStScn:	ld	b,0		; start with Device 0
IStSc1:	xor	a		; A=0 (Z): assume device 'NotReady'
	add	hl,hl		; Push out bit -> Carry
	call	c,CiSt		; Read Status
	ret	nz		; return if revice ready
	inc	b		; dev + 1
	ld	a,h
	or	l		; any more devices?
	jr	nz,IStSc1
	ret			; not ready: RET with A=00

; Table driven Input Driver for all character devices.
; Input: Device in B. Output: IX=^PORTS, IOP set, A=00/FF, Z=1/0.
; Register BDEHL unchanged.

CiSt:	push	hl
	ld	a,9
	multu	a,b
	lda	ix,(hl++Ports)	; Load pointer to Device Port Data
	iopage	(ix)		; set I/O-Page accordingly
	pop	hl
	ld	c,(ix+5)	; Status port address
	in	a,(c)		; Read Status
	xor	(ix+6)		; Possibly invert bits
	and	(ix+7)		; Check RXF Mask
	ret	z		; A=00 : Not Ready
	or	0FFh		; A=FF : Ready
	ret

;***********************************************************************
;**   Input Routines for all logical character I/O Interfaces         **
;***********************************************************************

AuxIn::	ld	hl,(@AIVec)	; AUXILIARY INPUT
	jr	InScn

ConIn::	ld	a,(BrkFlg)
	or	a
	jr	nz,SndBrk	; Is there a ^C to send to host?
	ld	hl,(@CIVec)	; CONSOLE INPUT

InScn:	push	hl
	call	IStScn		; Query overall input status
	pop	hl
	jr	z,InScn		; busy wait until ready (then B/IX/IOP invalid)
CIn:	ld	c,(ix+8)	; Address of input port
	in	a,(c)		; Get the character
	ret

SndBrk:	inc	(BrkFlg)	; Reset Break Flag (FF->00): return ^C
	ld	a,CtlC
	ret

; Flag for aborting Disk I/O errors.
; If set (FF), then next CONIN will return a ^C to then host.

BrkFlg::defb	0		; Default: no ^C ...

; Table for XON/XOFF Protocol: at XON (^Q) value is FF, at XOFF (^S) value
; is 00 (one entry for each of the 16 devices). Also, if input characters
; are received, they will be saved here.

XoffList:defb	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1

;***********************************************************************
;**           Device Parameter Tables for Character Drivers           **
;***********************************************************************

; The specified Device Numbers are value only if the devices are
; installed.

; Table of Port Addresses and Bit masks for all Devices.
; For each block, the data is contained in the following order:
; I/O-Page, TX-Statusport, TX-Invert-Mask, TXE-Mask, OUT-Data port,
; RX-Statusport, RX-Invert-Mask, RXF-Mask, IN-Data port.
; (The inversion occurs before masking.)

Ports:	defb	UartP,TCS,0,01h,TDR,RCS,0,10h,RDR	; 0: CRT1
	defb	BoardP,UartCtl,0,40h,UartDat,UartCtl,0,80h,UartDat ; 1: CRT2
    if ioclk
	defb	BusP,V24AC,0,0,0,V24AC,0,01h,V24AD	; 2: V24AR
	defb	BusP,V24AC,0,04h,V24AD,V24AC,0,0,0	; 3: V24AT
	defb	BusP,V24BC,0,04h,V24BD,V24BC,0,01h,V24BD ; 4: V24B
    endif
    if spool
	defb	BusP,SplSta,80h,80h,SplDat,SplSta,0,0,0	; 5: SPOOL
    endif
    if hgt
	defb	BusP,hgtsta,0,04h,hgtdat,hgtsta,0,01h,hgtdat ; 6: HGT
    endif
    if ide
	defb	BusP,Centr,80h,80h,Centr,Centr,0,0,0	; 7: CENTR
    endif

; DEVICE Table for direct CP/M-3 access
; First table is for communication parameters (in reverse order):
; Bit 7,6 :	00 = 5 Bit		01 = 7 Bit
;		10 = 6 Bit		11 = 8 Bit
; Bit   5 :	 0 = RX/TX Enable	 1 = Auto Enables (Hard-Handshake)
; Bit 3,2 :	00 = verboten		01 = 1 Stopbit
;		10 = 1.5 Stopbits	11 = 2 Stopbits
; Bit   1 :	 0 = Parity odd		 1 = Parity even
; Bit   0 :	 0 = Parity disable	 1 = Parity enable

	cseg

    if ide
	defb	0		; dev 7: parallel
    endif
    if hgt
	defb	0		; dev 6: parallel
    endif
    if spool
	defb	0		; dev 5: parallel
    endif
    if ioclk
	defb	11100100b	; dev 4 V24B: 8+1 Bit, No Parity, Auto Enables
	defb	11100100b	; dev 3 V24AT: 8+1 Bit, No Parity, Auto Enables
	defb	11100100b	; dev 2 V24AR: 8+1 Bit, No Parity, Auto Enables
    endif
C2H::	defb	11100100b	; dev 1 CRT1: 8+1 Bit, No Parity, Auto Enables
C1H::	defb	11100100b	; dev 0 CRT2: 8+1 Bit, No Parity, Auto Enables

	endif	; (if not loader)
	
CTbl::	defb	'CRT1  '	; dev 0, Console 1 (CPU)
	defb	InOut+Serial+SoftBd
C1Bd::	defb	Bd19200
	defb	'CRT2  '	; dev 1, Console 2 (TPUART)
	defb	InOut+Serial+SoftBd
C2Bd::	defb	Bd19200
    if ioclk
	defb	'V24AR '	; dev 2, V24A Input
	defb	Input+Serial+SoftBd
	defb	Bd9600
	defb	'V24AT '	; dev 3, V24A Output
	defb	Output+Serial+SoftBd
	defb	Bd9600
	defb	'V24B  '	; dev 4, V24B (Bidir.)
	defb	InOut+Serial+SoftBd
	defb	Bd9600
    endif
    if spool
	defb	'SPOOL '	; dev 5, Spooler (Centronics)
	defb	Output
	defb	BdNone
    endif
    if hgt
	defb	'HGT   '	; dev 6, HGT-Terminal (parallel via Bus)
	defb	InOut
	defb	BdNone
    endif
    if ide
	defb	'CENTR '	; dev 7, Centronics on IDE Card
	defb	Output
	defb	BdNone
    endif
	defb	0		; End of Table

; Values for "Mode" field in Device table

Input	equ	00000001b
Output	equ	00000010b
InOut	equ	Input+Output
SoftBd equ	00000100b
Serial	equ	00001000b
XonXoff	equ	00010000b

; Values for baud rate setting

BdNone	equ	0	; no Baudrate (parallel)
Bd50	equ	1	; 38400/19200 Baud (instead of 50 Baud)
Bd75	equ	2	; 75 Baud
Bd110	equ	3	; 110 Baud
Bd134	equ	4	; 134.5 Baud
Bd150	equ	5	; 150 Baud
Bd300	equ	6	; 300 Baud
Bd600	equ	7	; 600 Baud
Bd1200	equ	8	; 1200 Baud
Bd1800	equ	9	; 1800 Baud
Bd2400	equ	10	; 2400 Baud
Bd3600	equ	11	; 3600 Baud
Bd4800	equ	12	; 4800 Baud
Bd7200	equ	13	; 7200 Baud
Bd9600	equ	14	; 9600 Baud
Bd19200	equ	15	; 19200 Baud

	end
