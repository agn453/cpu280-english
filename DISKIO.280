	title	'AutoFormat Disk I/O Module of CP/M-3 BIOS'
	.xlist
	maclib	Z280EQU
	maclib	CPU280
	maclib	OPTIONS
	.list
	.z280

; 950214 Tilmann Reh
; 170308 Wayne Warthen

; 10-July-2017 Tony Nicholson
; Comments translated from German to English (using Google
; Translate with some appropriate language adjustments resulting
; from an examination of the instruction sequences).  Also
; corrected the syntax to be compatible with Hector Peraza's
; ZSM4 Z80/Z180/Z280 assembler 

LogTry	equ	3	; 1..255, Number of attempts at AutoFormat-Read
RdTry	equ	3	; 1..255, Number of attempts at Disk-Read
WrTry	equ	3	; 1..255, Number of attempts at Disk-Write
VerTry	equ	1	; 0..255, Number of attempts at Disk-Verify
AllTry	equ	3	; 1..255, Total number of attempts Disk-Write/Verify

; These variables should later be adjusted in the Bootloader-Setup.
; When VerTry=0, there is no conditional assembly.

	dseg			; Disk-I/O Routines are wholly in Bank 0

;***********************************************************************
;**           Disk-I/O Control Routines for the BDOS                  **
;***********************************************************************

; Initialisation of the Floppy driver. Non-existing drives are removed
; from the Drive Table. All 4 drives are handled by this one routine.
; No messages are output in order to reduce verbosity.

    if not loader

DskIni:	iopage	BoardP		; for accessing the NVRAM
	ld	bc,400h+s$Drv0	; Point to the drive entries in NVRAM
	ld	hl,DTbl		; Start with the Drive Table (for A:)
DskIn1:	in	a,(c)
	and	7
	jr	nz,DskIn2	; Drive Typ <> 0 : drive available
	ldw	(hl),0		; Typ = 0 : remove drive table entry
DskIn2:	inc	hl
	inc	hl		; next table entry
	inc	c		; next drive
	djnz	DskIn1		; check each of the 4 drives
	ret

    endif

; Select floppy drive for all further accesses. Here are all global
; pointers and variables that are set in such a way to facilitate easy
; R/W access. On 'Initial Select' and AutoFormat detection is performed.
; The drive to select is passed in the C register (0..3) and the cold
; select hint flag is in E.

    if not loader
MskTbl:	defb	1,2,4,8		; Bit masks for Floppy Login Vector
    endif

DskSel:	ld	a,c		; Drive (0..3) to A
	ld	(PDrive),a	; Save drive to PDrive: for FDC
	iopage	BoardP		; for NVRAM access
    if loader
	add	a,s$Drv0
	ld	c,a		; Drive type address (NVRAM) in C
    else
	push	ResIOP		; after returning to Bus-I/O-Page
	exts	a		; PDrive to HL
	add	a,s$Drv0
	ld	c,a		; Drive Type Address (NVRAM) in C
	ld	a,(hl++MskTbl)	; Get the bit mask from table
	ld	(CurMsk),a	; save to current mask
    endif
	in	a,(c)		; Get drive type from Setup-RAM
	ld	(DrvTyp),a	; and save as the current drive type
	and	7		; lower 3 bits: Typ-Code ( <> 0 )
	multu	a,3		; 3 bytes per Specify command
	lda	hl,(hl+Steps-6) ; Point to 'Specify' (Types 2..7)
	ld	b,3
	call	FdcCo1		; Issue SPECIFY command (FDC Times)
	push	ix		; save IX (used by ZPM3)
	call	SetLen		; Set Sector length of FDC and DMA
	pop	ix
    if not loader		; Loader: only one call, always AutoFormat
	bit	0,e
	jr	z,AutoFm	; First select? (Flag E=0)
	ld	a,(CurMsk)
	ld	hl,ResMsk
	and	(hl)
	call	z,DskHom	; if FDC Reset: perform drive recalibrate
	ld	hl,(CurDPH)	; Return with DPH in HL
	ret

; Disk change (detect drive AutoFormat)

AutoTim:call	MotOff		; Time-Out/Cancel AutoFormat: Motor off
	ld	hl,0
	ret			; End with HL=0 (Illegal Drive)
    endif

AutoFm:
    if not loader
	ld	(DFunc),'L'	; Prepare the 'LOGIN' error message
    endif
	call	DskHom		; Motor on, seek to track 0
	ldw	(Retry),ChkRtry	; Initialise retry count
ChkRtry:call	ChkDen		; Density test
	call	c,TimErr	; Time-Out: Error/Retry
    if loader
	ld	hl,0
	ret	c		; Time-Out: Abort
    else
	jr	c,AutoTim	; after Time-Out: Abort (Illegal Drive)
    endif
	jp	nz,SelDsX	; Error doing ID-Read: no AutoFormat
    if not loader
	ld	(DFunc),'P'	; Change error message for 'Params'
    endif
	ld	a,(Dense)
	or	6		; FDC 'READ DATA'
	ld	(CList),a
	xor	a
	ld	(PTrack),a	; Track 0
    if not loader
	ld	(DBnk),a	; Auto Format buffer in Bank 0
    endif
	inc	a
	ld	(Psect),a	; Read Track 0 Sector 1 to page 0
	ld	(EOT),a
	ld	a,(Result+4)	; Examine head number from ID Field
	ld	(Head),a
	ld	a,(Result+6)	; N from ID Field (Sector length)
	ld	(FdcN),a
	ldw	(DMA),Buffer	; new log. Set transfer address
	ldw	(RdLen),128	; Generally only 128 byte read

	ldw	(Retry),RdParm	; Address for retry attempts
RdParm:	ld	bc,900h+LogTry	; Number of attempts in C, FDC command 9 Bytes
ParmLp:	push	bc
	ld	de,RdDmaPB
	call	DskIO		; Sector read
	pop	bc
	call	c,TimErr	; at Time-Out: ask what to do
	jp	c,DskErr	; Error aborted: Exit with error message
	call	ErChkP
	jr	z,ActDPB	; no error: Examine sector
	ld	a,(Result+1)
	bit	2,a		; Sector 1 found?
	jp	nz,SelDsX	; no: cannot do AutoFormat...
	dec	c
	jr	nz,ParmLp	; retry in case of error
	jp	SelDsX		; failed - select disk with previous format

; Check if the AutoFormat sector contains a valid disk parameter block

ActDPB::push	ix		; Save IX (because it is used by ZPM3)
	push	ActDPX		; Return address for all following 'RET'
	ld	ix,Buffer
	ld	a,21h		; First comparison byte
	cp	(ix)		; Address 00h right?
	ret	nz		; not 21h : no valid Parameter block
	cp	(ix+20h)	; Address 20h
	ret	nz
	cp	(ix+40h)	; Address 40h
	ret	nz
	cp	(ix+60h)	; Address 60h
	ret	nz
	ld	a,(ix+1)
	cp	0AEh		; check first ID-Byte
	ret	nz
	ld	a,(ix+2)
	cp	0BFh		; check second ID-Byte
	ret	nz
	pop	hl		; discard RET-Address from Stack

; Update Disk Parameter Blocks

	ld	hl,(CurDPH)	; point to current DPH
	ldw	hl,(hl++12)
	ex	de,hl		; Pointer to DPB in DE
	ld	ixh,d
	ld	ixl,e		; ... and in IX
	ld	hl,Buffer+3
	ld	bc,17		; DPB 17 bytes long
	ldir			; Copy DPB from Buffer
	set	7,(ix+12) 	; Permanent Mounted Drive
	ld	de,(CurDPH)
	dec	de
	ld	hl,Buffer+31
	ld	bc,12		; 12 Bytes
	lddr			; Copy track translation values before DPH
	ld	hl,(CurDPH)	; DPH
	ldw	de,(hl)		; TRANS in DE
	ld	ixh,d
	ld	ixl,e		; ... and in IX
	ld	hl,Buffer+64
	ld	bc,64		; TRANS table upto to 64 Byte long (max.)
	ldir			; load from parameter block (except S.1/33)
	ld	a,(Buffer+62)
	ld	(ix),a		; Sector 1
	ld	a,(Buffer+63)
	ld	(ix+32),a	; Sector 33
ActDPX:	pop	ix		; Restore IX (because it used by ZPM3...)

; SELDSK output (AutoFormat only, Cold logon of drive).
; Motor off, restore Density and FDC/DMA Parameters based
; on the current DPB, check permissible track format.

; After cold logging the drive DCHG resets and seek to track 1.

SelDsX:
    if not loader
	ld	a,1
	call	Seek		; Seek to track 1 (reset DCHG)
	call	MotOff		; Drive Motor off again
    endif
	push	ix		; save for ZPM3
	call	SetLen		; Restore FDC and DMA parameters
	ld	a,(DrvTyp)	; Type of current selected drive
	ld	b,a		; save it in B
	bit	3,b
	jr	nz,SelDx1	; If 80-Track drive: all OK
	ld	a,(ix-11)	; (IX=CURDPH from SETLEN)
	cp	45
	jr	nc,SelDxE	; 40-Track drive, from 45 tracks error
SelDx1:	bit	4,b
	jr	nz,SelDx2	; If double-sided drive: all OK
	ld	a,(ix-2)
	and	3
	jr	nz,SelDxE	; Single sided drive: Overflow impossible
SelDx2:
    if not loader
	ld	hl,LogMsk	; if everything is OK
	ld	a,(CurMsk)
	or	(hl)
	ld	(hl),a		; Mark the drive as logged in
    endif
	ld	hl,(CurDPH)	; and return with DPH in HL
	pop	ix
	ret
SelDxE:	ld	hl,0
	pop	ix
	ret			; 'Illegal Drive' : invalid configuration

; Sector Read. Read errors are repeated several times before an error
; is reported (defined by RdTry).

DskRd:
    if not loader
	ld	a,(CurMsk)
	and	(LogMsk)	; Drive still logged in?
	ld	a,-1
	ret	z		; no: Return with A=FF (Media Change)
	push	ResIOP		; save Bus-Page for later
    endif
	call	DskPos		; Motor on, position head
DskRd1::
    if not loader
	ld	(DFunc),'R'	; in case of error: message 'READ'
    endif
	ldw	(Retry),RdRtry	; Repeat up to RdRtry attempts
RdRtry:	ld	a,(Dense)
	or	6		; FDC-Command 'READ DATA'
	ld	(CList),a
	ld	bc,900h+RdTry	; RdTry tries, 9 Byte command
DskRd2:	push	bc
	ld	de,RdDmaPB
	call	DskIO		; Sector read
	pop	bc
	call	c,TimErr	; Time-Out: ask
	jp	c,DskErr	; User cancelled: that's it...
	call	ErrChk		; Error?
	jr	z,RWExit	; RET if no error (with A=0)
	dec	c
	jr	nz,DskRd2	; try again
    if not loader
	ld	a,(Quiet)
	or	a
	ld	a,1
	ret	nz		; if Quiet active: return without an error msg
    endif
	call	DatErr		; Read error: ask
	jp	c,DskErr	; Error Return

RWExit:	ld	hl,(CurDPH)
	dec	hl
	dec	hl
	bit	3,(hl)
	call	nz,Invert	; with inverse recording, invert the buffer

    if not loader
MotOff::ld	hl,MotFlg
	res	0,(hl)		; Motor off after a delay (Rest via Interrupt)
    endif
	xor	a
	ret			; RET with A=0 (No errors)

; Sector write. Attempt to write WrTry times, then compare VerTry times.
; If there's a problem then retry AllTry times. If there's still an error
; then print an error message.
; HD Bug WorkAround by Stefan Nitschke: At the first appearance of a
; FDC Overrun set a Flag and try again (see DSKIO for explanation).

    if not loader

DskWr:	ld	a,(CurMsk)
	and	(LogMsk)	; Drive still logged in?
	ld	a,-1
	ret	z		; no: Return with A=FF (Media Change)
	push	ResIOP		; later again Bus-Page
	ld	hl,(CurDPH)
	dec	hl
	dec	hl
	bit	3,(hl)
	call	nz,Invert	; with inverse recording, invert the buffer
	call	DskPos		; Motor on, position the head
DskWr1::ldw	(Retry),WrRtry	; Write retry entry point
WrRtry:	ld	e,AllTry	; Number of attempts for all
Wr1:	ld	(DFunc),'W'	; Prepare the error message
	ld	a,(Dense)
	or	5		; FDC-Command 'WRITE DATA'
	ld	(CList),a
	ld	bc,900h+WrTry	; WrTry write attempts, 9 byte command
Wr2:	push	bc
	push	de
	ld	de,WrDmaPB
	call	DskIO		; Write (or retry)
	pop	de
	pop	bc
	call	c,TimErr	; Time-Out: ask
	jr	c,DskErr	; Abort
	call	ErrChk		; Error?
	jr	z,Verify	; if no error -> verify (Scan)
	call	ChkBug		; if error: maybe HD-Bug?
	jr	c,WrRtry	; yes: try write again (WorkAround active)
	ld	a,(Result+1)	; FDC-Status 1
	and	2		; NOT WRITABLE from FDC (WRPROT from FDD)
	ret	nz		; RET with A=2 if Write-Protected
Wr3:	dec	c
	jr	nz,Wr2		; try again
	call	DatErr		; ask...
	jr	c,DskErr	; --> User cancelled
	jr	RWExit		; --> User Ignore

Verify:	ld	a,VerTry	; Number of verify attempts
	or	a
	jp	z,RWExit	; no Verify: continue with RWExit
	ld	c,a		; Set count to C
	ld	(DFunc),'V'	; Identifier for error message
	ld	a,(Dense)
	or	11h		; FDC-Command 'SCAN EQUAL'
	ld	(CList),a
Ver1:	push	bc
	push	de
	ld	de,WrDmaPB
	call	DskIO		; write DMA to controller
	pop	de
	pop	bc
	call	c,TimErr	; Time-Out (possibly retry at DSKWR1)
	jr	c,DskErr	; ...User Cancelled
	call	ErrChk		; Error?
	jp	z,RWExit	; no errors: RET with A=0
	dec	c
	jr	nz,Ver1		; Scan-Error: try again
	dec	e
	jr	nz,Wr1		; all unsuccessful: try again from the beginning
	call	DatErr		; ask...
	jp	nc,RWExit	; ...User Ignored

    endif

; Output an error message with the operation type and command/result list.
; Then with A=1 (Data Error) and HL=0 (Illegal Drive) return to the BDOS.

DskErr:
    if not loader
	call	MotOff		; Motor off
	ld	a,(@ErMde)	; ERROR-MODE from SCB
	inc	a
	jr	z,ErrEx		; if ErMde=FF no message, only RET with A=1
    endif ; WBW 2017-02-28: Enable error reporting in loader
	ld	a,(Drive)
	add	a,'A'
	ld	(DrvCod),a	; Insert Drive letter into message
	ld	hl,DrvMsg
	call	PMsg		; Output error message
	ld	hl,(Track)
	call	PDec		; Output track number
	ld	hl,SecMsg
	call	PMsg		; Output Sector Header
	ld	a,(PDrive)
	bit	2,a		; Head-Bit (phys. head)
	ld	c,'B'
	call	nz,ConOut	; leading B at page 1
	ld	hl,(PSect)
	ld	h,0
	call	PDec		; Output sector number
	ld	hl,CmdMsg
	call	PMsg		; 'Command:'
	ld	hl,CList
	ld	b,9
	call	HexLst		; Output 9 Byte FDC command bytes
	ld	hl,ResMsg
	call	PMsg		; 'Result:'
	ld	hl,Result
	ld	b,7
	call	HexLst		; Output 7 Byte FDC Result codes in hex
	;endif			; WBW 2017-02-28: Enable error reporting in loader
ErrEx:	ld	a,1		; RET with A=1 due to errors
	ld	hl,0		; if AutoFormat fails... (DskSel)
	ret

;***********************************************************************
;**          Command Control of the Floppy Disk Controller            **
;***********************************************************************

; FDC Control: Command transfer numberof bytes in B.
; I/O-Page must already be set to BOARDP. Changes ABHL.

FdcCom::
    if loader
	ld	hl,CList
    else
	ld	hl,(CmdAdr)	; Point to command list
    endif
FdcCo1::in	a,(FdcSta)	; (Entry with pointer in HL)
	rla
	jr	nc,FdcCo1	; wait until FDC-RQM (Request for Master)
	rla
	jr	c,FdcErr	; with incorrect data direction: DIO-Error
	ld	a,(hl)
	out	(FdcDat),a	; Output command/data bytes to FDC
	inc	hl		; pointer to next byte
	djnz	FdcCo1		; output all command bytes
	ret

; DIO-Error (Data Direction Error in FDC) : Stop the system
;*** Possibly correct errors and continue working?
; (Is error correctable at all?)

FdcErr:	ld	hl,DioMsg
	call	PMsg		; Output "DIO-Error"
	di
	halt			; for safety's sake do not continue working

; After FDC errors during writing/formatting:
; set FDC-Overrun internal Flag HDBug (then try again).
; This activates the WorkAround for the DMA-Bug in DskIO.
; Output with CY if HD-Bug is freshly recognised, otherwise with NZ/NC.

    if not loader

ChkBug::ld	a,(Result+1)	; FDC-Status register 1
	xor	10h		; Status (40) 10 (FDC Overrun) ?
	ret	nz		; no OR: not due to DMA-Bug (NC)
	ld	a,(HDBug)	; previous Bug-Status
	or	a
	ret	nz		; HDBug already known: End with NC
	sub	1		; A=FF, CY=1
	ld	(HDBug),a	; the first time: set Flag
	ret

    endif

; DMA init for Sector-Transfer, continue with INTCOM.
; DE must point to DMA Parameter block!
; HD-Bug-WorkAround by Stefan Nitschke: From the first HD bug every time
; DMASET the (undocumented!) I/O Addresses FFxxE8 to FFxxEB with 0000
; described. (No one knows why that fixes the bug!)

DskIO::	push	bc		; Save command length (B)
    if not loader
	call	ClcDMA		; phys. DMA-Address from log. to calculate
	ld	(RdDMA),hl
	ld	(RdDMA+2),a
	ld	(WrDMA),hl	; Address
	ld	(WrDMA+2),a	; Bank
    endif
	ex	de,hl		; Pointer for DMA Parameter in HL
	call	DmaSet		; Initialise and start DMA 0
    if not loader
	ld	a,(HDBug)
	or	a		; HD Write Error? 
	jr	z,DskIO1	; if not, continue normally
	ld	bc,04E8h	; 4 Addresses from FFxxE8 (IOPage still DMAP)
	ld	hl,0		; to write: Word 0
BugLp:	outw	(c),hl		; Describe non-existent I/O Addresses
	inc	c		; next address
	djnz	BugLp		; until all 4 addresses are processed
    endif
DskIO1:	pop	bc		; (Command length in B)

; Output command to FDC with wait (limited) to its interrupt. IOPage
; is set to BoardP. On exit Boardp is still set.
; Time-Out is 1 second (Home max. 240ms, I/O max. 400ms).

IntCom::iopage	BoardP
	xor	a
	ld	(FdcRdy),a	; Reset FDC Ready Flag
	call	FdcCom		; Output FDC Command
IntCo1::ld	hl,Cnt10
	ldw	(hl),100	; Counter to 1 second (100 * 10ms)
	inc	hl
IntCo2:	ld	a,(FdcRdy)
	or	a
	ret	nz		; FDC-INT : RET with CY=0
	bit	7,(hl)		; Count expired?
	jr	z,IntCo2	; No, continue
	iopage	DMAP
	ld	hl,0
	ld	c,tdr0
	outw	(c),hl		; Stop DMA 0 (Disable)
	iopage	BoardP
	ld	a,88h
	out	(FdcLdOR),a	; FDC: Programmed Reset
	in	a,(FdcLdCR)
	ld	a,8Ch
	out	(FdcLdOR),a
	in	a,(FdcSta)	; Then again for "Special Mode" progr.
    if not loader
	xor	a		; after FDC Reset all "PCN" to 0,
	ld	(ResMsk),a	; ... that's why all 4 drives "log out"
    endif
	scf			; Time-Out: RET with CY=1
	ret

; DMA Parameter blocks for Floppy-I/O (global labels for FORM).

RdDmaPB:defb	dal0		  ; DMA 0
    if loader
	defw	Buffer
	defb	81h		  ; Loader: Target fixed Buffer on page 81xxxxh
    else
RdDMA:	defs	3		  ; Used for destination
    endif
	defb	FdcDack,0,BoardP  ; Src FDCDACK
RdLen::	defs	2		  ; Used for length of buffer
	defw	1110000010000000b ; descriptor: DMA 0 burst enable, Read

    if not loader
WrDmaPB::defb	dal0		  ; DMA 0
	defb	FdcDack,0,BoardP  ; Dest FDCDACK
WrDMA:	defs	3		  ; Used for source
WrLen::	defs	2		  ; Used for length
	defw	1000000010001100b ; descriptor: DMA 0 burst enable, Write
    endif

;***********************************************************************
;**                 Subroutines for Disk-I/O                          **
;***********************************************************************

; Before first R/W (Initial Select) seek drive to track 0 and recalibrate
; Motor is switched on and left running (HOME).
; Called only from DskSel (Initial Select) and TimErr (Time-Out FDC-Reset).

DskHom:
    if not loader
	call	MotOnW		; Motor on, wait for Drive Ready
    else			; WBW 2017-02-28
	iopage	BoardP		; WBW 2017-02-28
    endif
	call	SetStp		; Set clock for step rate
	ld	(CList),7	; FDC-Command 'RECALIBRATE'
	ld	b,2
	call	IntCom		; command output
	ld	a,(Result)
	and	11010000b	; check AT/IC and EC Flags
	ld	b,2
	call	nz,IntCom	; do it again if 'error' (Track>76)
    if loader
	xor	a
	ld	(CurTrk),a
    else
	ld	a,(CurMsk)
	ld	hl,ResMsk
	or	(hl)
	ld	(hl),a		; set corresponding bit in ResMsk: FDC "OnTrack"
	ld	hl,(Drive)	; log. Drive (0..3)
	ld	h,0
	ld	(hl++CurTks),0	; current phys. track position for Drive: 0
    endif
	jp	SetClk		; go and set FDC clock rate again for I/O

; Invert DMA buffer (for inverse recording).
; Uses the area allocated for this in the 8k-Block 0000..1FFF

Invert:
    if loader
	ld	de,(DMA)
    else
	iopage	MmuP
	ld	a,10h
	out	(pdr),a		; Point the MMU PDR Pointer to 'System 0'
	in	a,(pdr)		; wg. chip failure
	call	ClcDMA		; calculate phys. DMA-Address (--> AHL)
	ex	de,hl		; Address in ADE
	ld	h,a
	ld	a,d		; phys. Page in HA
	and	0F0h		; for PDR only use upper 12 bits
	or	0Ah		; Valid & Cacheable
	ld	l,a		; valid PDR value in HL
	ld	c,bmp
	outw	(c),hl		; output
	lda	hl,(hl+10h)	; next PDR value
	outw	(c),hl		; output
	ld	a,d
	and	0Fh
	ld	d,a		; Address within page in DE (0..FFF)
    endif
	ld	hl,(RdLen)	; Buffer length
InvLp:	ld	a,(de)
	cpl			; Invert the byte in the buffer
	ld	(de),a
	inc	de		; bump pointer
	dec	hl		; decrement length
	ld	a,h
	or	l
	jr	nz,InvLp	; and repeat for the entire buffer
    if not loader
	ld	a,10h
	out	(pdr),a		; MMU PDR Pointer to 'System 0'
	ld	b,2		; (C still  contains BMP)
	ld	hl,SysMMU
	otirw			; Restore MMU System-PDR's 0 and 1
    endif
	ret

; Position the head of the drive on track and side. Different
; overflow methods are considered.
; First, overflow and edit sector numbers:

DskPos::push	ix		; for ZPM3
    if not loader
	call	MotOnW		; Motor an, possibly wait
    else			; WBW 2017-02-28
	iopage	BoardP		; WBW 2017-02-28
    endif
	ld	a,(Track)
	ld	c,a		; log. Track in C
	ld	ix,(CurDPH)	; Point to DPH for Format Parameters
	ld	a,(ix-8)	; Track translation method (0=none)
	or	a
	jp	nz,TTrans	; Translation active: execute
	ld	a,(ix-2)
	and	3
	ld	b,a		; Overflow Bits in B, Z-Flag on 'None'
	ld	a,(Sector)	; Sector (from TRANS table) in A
	jr	z,DskPoX	; no overflow: Use Track/Sector directly

	djnz	DskPo1
	rlca			; Sector overflow:
	rrca			; Bit 7 copied to CY
	res	7,a		; only 7 Bit Sector number
	jr	DskPoX

DskPo1:	djnz	DskPo2
	ex	a,c
	cp	(ix-11)		; Track overflow: Compare with track number
	ccf
	jr	nc,DskPo1a	; Track smalled then count: Side 0
	sub	(ix-11)		; otherwise deduct the number
	scf			; --> Page 1
DskPo1a:ex	a,c
	jr	DskPoX

DskPo2:	srl	c		; Half track overflow: Track/2, Head --> CY

DskPoX:	ld	(PSect),a	; Save phys. sector number
	ld	(EOT),a		; EOT due to missing terminal count
	lda	hl,(ix--10)	; Pointer to head number
	ld	a,(PDrive)
	res	2,a		; if Page 0 : reset HEAD Bit
	jr	nc,DskPoY	; Page 0 : PDRIVE unchanged
	set	2,a		; Page 1 : set HEAD Bit for FDC
	inc	hl		; Point to head number for Side 1
DskPoY:	ld	(PDrive),a
	ld	a,(hl)
	ld	(Head),a	; Store the head number in ID-Field

	ld	a,c		; phys. Track number
	cp	(ix-11)
	jr	nc,Step2	; Track number too big: do not start!	

; Double-Stepping for <45 tracks on a 80 track drive

	ld	a,(ix-11)	; Track number
	cp	45
	ld	a,c		; Track number in A
	jr	nc,Step1	; at over 45 tracks stepping 1:1
	ld	a,(DrvTyp)
	bit	3,a		; 40 or 80 Track drive?
	ld	a,c		; Track number in A
	jr	z,Step1		; under 45 tracks on 40 LW also 1:1
	add	a,a		; otherwise double-stepping (for 48 TPI)
Step1:	call	Seek		; Seek to track
	ld	a,c		; Track number in A
Step2:	ld	(PTrack),a	; save it R/W routine
	pop	ix
	ret

; Track translation process:

TTrans:	ld	b,a		; Method in B
	djnz	TTran2
	ld	a,(ix-11)	; Method 1:
	dec	a
	cp	c
	jr	nc,TTranX	; Track smaller max --> ok, front
	add	a,(ix-11)	; 2*max -1 (i.e. 79 or 159)
	sub	c
	ld	c,a
	scf			; --> Page 1
	jr	TTranX

TTran2:	djnz	TTran3		; Method 2:
	ld	a,c
	sub	(ix-11)		; Track - tracks per side
	ccf
	jr	nc,TTran2a	; Track of small number of tracks: Side 0
	ld	c,a		; otherwise track correct, Side 1
TTran2a:push	af		; save CY
	ld	b,(ix-11)
	srl	b		; half track number to B
	ld	a,c
	add	a,b		; first tracks from max/2
	cp	(ix-11)
	jr	c,TTran2b	; still below max: ok
	sub	(ix-11)		; 0..max/2-1
	neg	a		; 0..-max/2+1
	add	a,b		; max/2..1
	dec	a		; max/2-1..0
TTran2b:ld	c,a		; Track from A to C
	pop	af		; Head back in CY
	jr	TTranX

TTran3:	djnz	TTran4
	ld	a,c		; Method 3:
	dec	a		; Swap tracks 1 and 2 (now: 0 and 1)
	cp	2
	jr	nc,TTran3a	; do not swap if another track
	xor	1
	inc	a
	ld	c,a		; switched track 2 and 1 in C
TTran3a:srl	c		; Track/2, Head in CY

TTranX:	ld	a,(Sector)
	jp	DskPoX		; continue with Sector in A (Head in CY)

TTran4:	srl	c		; Method 4: Actually half-track overflow
	jr	nc,TTranX	; Side 0: ok
	ld	a,(Sector)
	add	a,(ix-12)	; Side 1: Continue counting sectors
	scf
	jp	DskPoX

; Seek drive to physical track (in A), global for Format-Manager.

Seek::	ld	(PTrack),a	; Save track in FDC command
    if loader
	ld	hl,CurTrk
    else
	ld	hl,(Drive)	; log. Drive (0..3)
	ld	h,0
	lda	hl,(hl++CurTks)	; Pointer to phys. track for this drive
    endif
	cp	(hl)
	jr	z,SetClk	; Already on this track, seek not necessary
	ld	(hl),a		; otherwise save the current track
	push	bc
	iopage	BoardP		; (if coming from FORM)
	call	SetStp		; set step-rate for FDC clock
	ld	(CList),0Fh	; FDC 'SEEK'
	ld	b,3
	call	IntCom		; FDC-edition
	pop	bc		; Fall-thru: FDC clock rate again for I/O

; Set FDC clock rates according to drive type and current format.
; SetHD or SetLD sets FDC clock direcly for High or Normal Density.
; SetStp sets the clock rate to the value required for the proper step rate.
; Board-Page required!

SetClk::ld	hl,(CurDPH)
	dec	hl
	dec	hl
	bit	7,(hl)		; High-Density-Format ?
	jr	z,setld		; no: set normal clock rate
SetHD::	out	(Drv_0),a	; FDC-DRV on LOW : 'High Density'
	xor	a
	out	(FdcLdCR),a	; CR := 0 --> 500 kb/s
	ld	(LDFlag),a	; reset Low-Density-Flag
	ret

SetLD::	out	(Drv_1),a	; FDC-DRV on HIGH : 'Low Density'
	ld	a,1
	ld	(LDFlag),a	; set Low-Density-Flag
	ld	a,(DrvTyp)
	and	3		; lower 2 bits specify clock rate
	cp	3
	adc	a,-1		; 0123 becomes 0122 for Control Register
	out	(FdcLdCR),a	; set CR accordingly
	ret

SetStp:	ld	a,(DrvTyp)	; Type Bit 3 : 40/80 Track Drive
	cpl			; Bit 3 now 0 = 80T, 1 = 40T
	and	8		; isolate Bit
	rrca
	rrca			; Value 2 at 40T, 0 at 80T
	out	(FdcLdCR),a	; --> 500 KHz for 80T, 250 KHz for 40T
	ret

; Set DMA and FDC Parameters according to DPB. Subsequently IX = CURDPH.
; Global entry point SETLN1 for Format-Manager (reading of arbitary sectors)

SetLen:	ld	ix,(CurDPH)
	ld	a,(ix-2)	; Bit-Flags
	and	40h
	ld	(Dense),a	; Set Density-Flag
	ldw	hl,(ix+12)	; Pointer to DPB
	ld	a,(hl+15)	; PSH (Physical Sector Shift)
	ld	(FdcN),a	; enter N in CLIST
SetLn1::add	a,a
	exts	a		; 2*N to HL (range 0..10)
	ldw	hl,(hl+LenTab)	; Get sector length from table
	ld	(RdLen),hl
    if not loader
	ld	(WrLen),hl	; use
    endif
	ret

LenTab:	defw	128,256,512,1024,2048,4096

; MOTONW turns on the drive Motor and waits 1 Second if the motor was off.
; WBW 2017-02-28: MotOnW routine is now enabled for loader build.  In this
; case it just sets the iopage which is assumed by code using this routine.
; For loader, the rest of the routine is not relevant.

    if not loader
MotOnW::iopage	BoardP		; select IO Page for Motor-Port
	out	(Mot_On),a	; Motor ON
	ld	hl,MotFlg
	ld	a,3
	ex	a,(hl)		; Motor-Flag set, old flag in A
	or	a
	ret	nz		; Motor already on: do not wait
	ld	hl,Cnt10
	ld	(hl),100	; Counter to 1 sec. (100 * 10 ms)
M_OnW1:	bit	7,(hl)		; busy wait
	jr	z,M_OnW1
	ret
    endif

; CHKDEN checks disk density (HD, MFM, FM, AutoFormat only).
; RET with Z means readable Indexfeld, otherwise NZ (in case of error).
; (Global for Format-Manager.)

ChkDen::ld	a,(DrvTyp)	; current drive type
	rra
	jr	nc,ChkD1	; no HD-Drive: start with MFM
	call	SetHD		; Use HD settings
	ld	a,40h		; HD is always MFM
	call	CheckD		; Try reading disk
	ret	z		; OK : RET (Z,NC)
	ret	c		; Time-Out : NZ,C
ChkD1:	call	SetLD		; Try LD using MFM/FM
	ld	a,40h
	call	CheckD		; test MFM
	ret	z		; success: RET (Z,NC)
	ret	c		; Time-Out : NZ,C
	xor	a		; now try FM (and RET with Z or NZ)

CheckD:	ld	(Dense),a	; save new density flag
ChkD2::	or	0Ah		; FDC 'READ ID'
	ld	(CList),a
	ld	b,2
	call	IntCom		; to FDC, then ERRCHK
	ret	c		; RET with CY=1 if Time-Out

; Check FDC status values for errors (basically after Result Phase).
; Return with Z (ok) or NZ (Error), only AF used.
; Since individual sectors can only be processed via the corresponding EOT,
; this check is used on all R/W 'Abnormal Termination' operations.

ErrChk::ld	a,(Result)	; FDC Status 0
	and	10010000b	; Normal and Abnormal Termination are ok!
	ret	nz		; Invalid Command or Equipment Check (Home)
	ld	a,(Result+1)	; FDC Status 1
	and	00110111b	; DE,OR,ND,NW,MA are errors (ignore EN)
	ret	nz
	ld	a,(Result+2)	; FDC Status 2
	and	01110111b	; CM,DD,WC,SN,BC,MD are errors (SH is ok)
	ret

; For Parameter reading engine test (ignore OverRun).

ErChkP::ld	a,(Result)	; FDC Status 0
	and	10010000b	; Normal and Abnormal Termination are ok!
	ret	nz		; Invalid Command or Equipment Check (Home)
	ld	a,(Result+1)	; FDC Status 1
	and	00100111b	; DE,ND,NW,MA are errors (ignore EN and OR)
	ret	nz
	ld	a,(Result+2)	; FDC Status 2
	and	01110111b	; CM,DD,WC,SN,BC,MD are errors (SH is ok)
	ret

; Error handling. For Disk I/O Errors (read and write errors) the
; choice of Repeat, Abort or Ignore are offered. To repeat, the destination
; address of RETRY must be set correctly! Otherwise return to the
; calling program with CY=1 (Abort with Error) or CY=0 (Ignore).

DatErr:	ld	a,(Drive)
	add	a,'A'
	ld	(ErrDrv),a	; Insert drive name in message
	ld	hl,CrcMsg	; Error message with CRC errors
	ld	a,(Result+1)
	bit	5,a		; Is it a CRC error (ID or Data)?
	jr	nz,DskEr1	; yes: more specific message
	ld	hl,DskMsg	; no: general message
DskEr1:	call	PMsg		; Output error text
	ld	hl,ErrMsg
	call	PMsg		; Remainder of error message and prompt
DskEr2:	call	ConIn		; Wait for input character
    if not loader
	cp	3
	jr	z,DskEr4	; ^C: Cancel, also send ^C to Host
    endif
	and	0DFh		; --> CAPS
	cp	IgnoreChar
	ret	z		; Ignore: RET with NC
	cp	AbortChar
	scf
	ret	z		; Abort: RET with C
	cp	RetryChar
	jr	nz,DskEr2	; nothing else allowed except 'Retry'

DskEr3:	pop	hl		; (Return address)
	defb	0C3h		; Op-code for JP
Retry::	defw	0		; Patch address, global for FORM

    if not loader
DskEr4:	ld	(BrkFlg),0FFh	; in CHARIO: return ^C to Host
	scf			; CY=1 : (Abort)
	ret
    endif

; Disk Time Out: Drive Not Ready.
; Here there are only two choices - Abort or Retry.
; Return either CY=1 or not at all (RETRY instead).

TimErr::ld	a,(Drive)
	add	a,'A'
	ld	(TimDrv),a	; Insert drive name in timeout message
	ld	hl,TimMsg
	call	PMsg		; Output message and prompt
TimLp:	call	ConIn
    if not loader
	cp	3
	jr	z,DskEr4	; ^C: Abort, with ^C an Host
    endif
	and	0DFh		; --> CAPS
	cp	'A'
	scf
	ret	z		; Abort: RET with C
	cp	RetryChar
	jr	nz,TimLp	; only permit 'Retry' response
				; perform Drive reset
	call	DskHom		; Seek to Track 0
	call	DskPos		; Reposition head (due to PCN in FDC)
	jr	DskEr3		; Try again

; Output (HL) in Hexadecimal, Number of Bytes in B.
; WBW 2017-02-28: Enable error reporting for loader build.

    ;if not loader		; WBW 2017-02-28 (comment out)
HexLst::ld	c,' '
	call	CO		; leading space
	ld	a,(hl)
	call	HexByt		; Output Byte at (HL) in Hex
	inc	hl
	djnz	HexLst		; next byte
	ret
    ;endif			; WBW 2017-02-28 (comment out)

; Text (Error messages):

    if deutsch
CrcMsg:	defz	cr,lf,'CRC'
DskMsg:	defz	cr,lf,'Disk'
ErrMsg:	defm	'-Fehler auf '
ErrDrv:	defz	'A: Abbruch/Ignorieren/Wiederholen? '

TimMsg:	defm	cr,lf,'Laufwerk '
TimDrv:	defz	'A: nicht bereit. Abbruch/Wiederholen? '
      ;if not loader		; WBW 2017-02-28 (comment out)
DrvMsg:	defm	cr,lf,bel,'BIOS '
DFunc:	defm	'L-Fehler auf '
DrvCod:	defz	'A: T-'
SecMsg:	defz	', S-'
CmdMsg:	defz	cr,lf,'Befehl:'
ResMsg:	defz	', Status:'
      ;endif			; WBW 2017-02-28 (comment out)
DioMsg:	defz	cr,lf,'DIO-Fehler'
    endif
    if english
CrcMsg:	defz	cr,lf,'CRC'
DskMsg:	defz	cr,lf,'Disk'
ErrMsg:	defm	' Error on '
ErrDrv:	defz	'A: Abort/Ignore/Retry? '

TimMsg:	defm	cr,lf,'Drive '
TimDrv:	defz	'A: not ready. Abort/Retry? '
      ;if not loader		; WBW 2017-02-28 (comment out)
DrvMsg:	defm	cr,lf,bel,'BIOS '
DFunc:	defm	'L-Error on '
DrvCod:	defz	'A: T-'
SecMsg:	defz	', S-'
CmdMsg:	defz	cr,lf,'Command:'
ResMsg:	defz	', Result:'
      ;endif			; WBW 2017-02-28 (comment out)
DioMsg:	defz	cr,lf,'DIO Error'
    endif

; SPECIFY Step Rate commands for various drive types.
; Caution! ALL commands contain the step rate at 8" clock (1ms step units)!
; For 40 Track drives the clock is halved (double step rate).
; For LW types 2..7 it includes a sepeate command (3 Bytes):

Steps:	defb	3,0DFh,20h	; 3" DD	     Step 3 ms, Load/Unload 64/480 ms
	defb	3,0DFh,20h	; 3" HD	     Step 3 ms, Load/Unload 64/480 ms
	defb	3,0AFh,40h	; 8"	     Step 6 ms, Load/Unload 64/240 ms
	defb	3,0DFh,20h	; 5" HD 360  Step 3 ms, Load/Unload 64/480 ms
	defb	3,0DFh,20h	; 5" DD	     Step 3 ms, Load/Unload 64/480 ms
	defb	3,0DFh,20h	; 5" HD 300  Step 3 ms, Load/Unload 64/480 ms

; Command to Floppy Controller (always 9 Bytes):

    if not loader
CmdAdr::defw	CList		; Pointer to command list (for FORM)
    endif

CList::	defb	0		; command byte
PDrive::defb	0		; drive number and head
PTrack::defb	0		; track number  (C)
Head::	defb	0		; head number   (H)
PSect::	defb	1		; sector number (R)
FdcN::	defb	0		; sector shift  (N) (0=128,1=256,2=512 etc.)
EOT::	defb	1		; physical end of track (last sector number)
GPL:	defb	4		; gap length (R/W)
DTL:	defb	0FFh		; data length to be read or written (if N=0)

; Last operation saved values

    if not loader
CurMsk:	defb	0		; Bit mask: current PDrive
ResMsk:	defb	0		; Bit mask: Bits=0 after FDC-Reset --> Home

Quiet::	defb	0		; Flag: Supress error messages (FORM)
HDBug:	defb	0		; Flag: HD-Bug occured: WorkAround!
    endif
DrvTyp::defs	1		; Current Drive Type (from NVRAM)
LDFlag::defs	1		; Low-Density-Flag (/HD), for FORM
Dense::	defs 	1		; Actual density (FM = 0, MFM = 40h)
    if loader
CurTrk::defs	1		; Current phys. Track
    else
CurTks::defs	4		; Current phys. Track for each of the 4 drives
    endif

	cseg			; resident

Result::defs	7		; 7 Byte FDC Result codes (for Format-Manager!)

;--- All parameters maximum values!
MaxBlk	equ	880		; maximal 880 Blocks (--> ALV)
MaxDir	equ	512		; maximal 512 Directory (--> CHK)

	dseg			; banked

; Extended Disk Parameter Headers (XDPHs).
; These include extra AutoFormat-System (not like the DRI sample code)
; prefixing the official DPH with 12 bytes of physical information, the
; format of which are copied directly from the FPB on the floppy disk.
; Entry addresses for Init/Login/Read/Write *after* the official DPH.
; There's only one initialisation routine for Floppy-I/O (which disables
; non-existent drive entries).

	defb	5,80		; Phys. Sectors and Tracks
	defb	0,1		; Head0, Head1
	defb	0		; Track translation
	defb	0,0,0,0,0	; (reserved)
	defb	11000001b,0	; BitFlag: Density, Invert, Multi, Overflow
    if loader
DPHB::
DPHC::
DPHD::
    endif
DPHA::	defw	TransA,0,0,0,0,0
	defw	DPBA
    if loader
	defw	0,0,BCB,BCB,-1
	defb	0
	defw	0,DskSel,DskRd,0 ; Driver entry points
    else
	defw	CSVA,ALVA,-2,-2,-2
	defb	0
	defw	DskIni,DskSel,DskRd,DskWr ; Driver entry points

	defb	5,80		; Phys. Sector and Tracks
	defb	0,1		; Head0, Head1
	defb	0		; Track translation
	defb	0,0,0,0,0	; (reserved)
	defb	11000001b,0	; BitFlag: Density, Invert, Multi, Overflow
DPHB::	defw	TransB,0,0,0,0,0
	defw	DPBB,CSVB,ALVB
	defw	-2,-2,-2
	defb	0
	defw	0,DskSel,DskRd,DskWr ; Driver entry points

	defb	5,80		; Phys. Sectors and Tracks
	defb	0,1		; Head0, Head1
	defb	0		; Track translation
	defb	0,0,0,0,0	; (reserved)
	defb	11000001b,0	; BitFlag: Density, Invert, Multi, Overflow
DPHC::	defw	TransC,0,0,0,0,0
	defw	DPBC,CSVC,ALVC
	defw	-2,-2,-2
	defb	0
	defw	0,DskSel,DskRd,DskWr ; Driver entry points

	defb	5,80		; Phys. Sectors and Tracks
	defb	0,1		; Head0, Head1
	defb	0		; Track translation
	defb	0,0,0,0,0	; (reserved)
	defb	11000001b,0	; BitFlag: Density, Invert, Multi, Overflow
DPHD::	defw	TransD,0,0,0,0,0
	defw	DPBD,CSVD,ALVD
	defw	-2,-2,-2
	defb	0
	defw	0,DskSel,DskRd,DskWr ; Driver entry points

    endif

; Sector translation tables for each drive (sector skew)

TransA:	defb 	1,3,5,7,9,11,2,4,6,8,10
	defb	129,131,133,135,137,139,130,132,134,136,138
	defs 	42		; Sector Translation Table: total 64 Bytes

    if not loader

CSVA:	defs	(MaxDir+3)/4	; Checksum Vector
ALVA:	defs	(MaxBlk+7)/4	; Allocation Vector (2 Bit)

TransB:	defb 	1,3,5,7,9,11,2,4,6,8,10
	defb	129,131,133,135,137,139,130,132,134,136,138
	defs 	42		; Sector Translation Table: total 64 bytes
CSVB:	defs	(MaxDir+3)/4	; Checksum Vector
ALVB:	defs	(MaxBlk+7)/4	; Allocation Vector (2 Bit)

TransC:	defb 	1,3,5,7,9,11,2,4,6,8,10
	defb	129,131,133,135,137,139,130,132,134,136,138
	defs 	42		; Sector Translation Table: total 64 bytes
CSVC:	defs	(MaxDir+3)/4	; Checksum Vector
ALVC:	defs	(MaxBlk+7)/4	; Allocation Vector (2 Bit)

TransD:	defb 	1,3,5,7,9,11,2,4,6,8,10
	defb	129,131,133,135,137,139,130,132,134,136,138
	defs 	42		; Sector Translation Table: total 64 bytes
CSVD:	defs	(MaxDir+3)/4	; Checksum Vector
ALVD:	defs	(MaxBlk+7)/4	; Allocation Vector (2 Bit)

    endif

; All disk parameter blocks are set to the maximum size (for GENCPM).
; DPB's are preloaded with 3.5" HD Format.

	cseg			; resident!

DPBA:	defw	176		; 128 byte sec/trk
	defb	5,31		; block shift,mask (4k)
	defb	1		; extent mask
	defw	MaxBlk-1	; max block number
	defw	MaxDir-1	; dir entries
	defb	0C0h,0		; dir blocks alloc vec
	defw	8000h+MaxDir/4	; checksum size
	defw	0		; tracks offset
	defb	3,7		; phys sec shift, mask

    if not loader

DPBB:	defw	176		; 128 byte sec/trk
	defb	5,31		; block shift,mask (4k)
	defb	1		; extent mask
	defw	MaxBlk-1	; max block number
	defw	MaxDir-1	; dir entries
	defb	0C0h,0		; dir blocks alloc vec
	defw	8000h+MaxDir/4	; checksum size
	defw	0		; tracks offset
	defb	3,7		; phys sec shift, mask

DPBC:	defw	176		; 128 byte sec/trk
	defb	5,31		; block shift,mask (4k)
	defb	1		; extent mask
	defw	MaxBlk-1	; max block number
	defw	MaxDir-1	; dir entries
	defb	0C0h,0		; dir blocks alloc vec
	defw	8000h+MaxDir/4	; checksum size
	defw	0		; tracks offset
	defb	3,7		; phys sec shift, mask

DPBD:	defw	176		; 128 byte sec/trk
	defb	5,31		; block shift,mask (4k)
	defb	1		; extent mask
	defw	MaxBlk-1	; max block number
	defw	MaxDir-1	; dir entries
	defb	0C0h,0		; dir blocks alloc vec
	defw	8000h+MaxDir/4	; checksum size
	defw	0		; tracks offset
	defb	3,7		; phys sec shift, mask

    endif

	end
